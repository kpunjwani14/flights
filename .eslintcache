[{"/home/shehzman/dbhw4/db-hw4/src/App.js":"1","/home/shehzman/dbhw4/db-hw4/src/Booking.js":"2","/home/shehzman/dbhw4/db-hw4/src/ResTable.js":"3","/home/shehzman/dbhw4/db-hw4/src/Search.js":"4","/home/shehzman/dbhw4/db-hw4/src/Homepage.js":"5","/home/shehzman/dbhw4/db-hw4/src/BookingModal.js":"6","/home/shehzman/dbhw4/db-hw4/src/BoardingModal.js":"7","/home/shehzman/dbhw4/db-hw4/src/Navigation.js":"8","/home/shehzman/dbhw4/db-hw4/src/reportWebVitals.js":"9","/home/shehzman/dbhw4/db-hw4/src/Example.js":"10","/home/shehzman/dbhw4/db-hw4/src/Erd.js":"11","/home/shehzman/dbhw4/db-hw4/src/Boarding.js":"12","/home/shehzman/dbhw4/db-hw4/src/Checkin.js":"13","/home/shehzman/dbhw4/db-hw4/src/BoardingPass.js":"14"},{"size":1035,"mtime":1607566324100,"results":"15","hashOfConfig":"16"},{"size":41608,"mtime":1607627339947,"results":"17","hashOfConfig":"16"},{"size":3593,"mtime":1607535098434,"results":"18","hashOfConfig":"16"},{"size":4911,"mtime":1607543133747,"results":"19","hashOfConfig":"16"},{"size":16644,"mtime":1607543046871,"results":"20","hashOfConfig":"16"},{"size":2239,"mtime":1607614181374,"results":"21","hashOfConfig":"16"},{"size":1636,"mtime":1607541537401,"results":"22","hashOfConfig":"16"},{"size":1147,"mtime":1607533201641,"results":"23","hashOfConfig":"16"},{"size":362,"mtime":1606682649705,"results":"24","hashOfConfig":"16"},{"size":1339,"mtime":1607615044631,"results":"25","hashOfConfig":"16"},{"size":430,"mtime":1607566324130,"results":"26","hashOfConfig":"16"},{"size":2028,"mtime":1607566324116,"results":"27","hashOfConfig":"16"},{"size":2511,"mtime":1607614781889,"results":"28","hashOfConfig":"16"},{"size":3336,"mtime":1607566324120,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"33"},"ghprut",{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"53"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/shehzman/dbhw4/db-hw4/src/App.js",["66"],"import logo from './logo.svg';\nimport React from 'react';\nimport './App.css';\nimport Homepage from './Homepage'\nimport Booking from './Booking'\nimport Navigation from './Navigation'\nimport Search from './Search'\nimport Checkin from './Checkin'\nimport Boarding from './Boarding'\nimport Erd from './Erd'\nimport BoardingPass from './BoardingPass'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n\n        <Navigation />\n        <Switch>\n          <Route path=\"/\" exact component={Homepage} />\n          <Route path=\"/checkin\" exact component={Checkin} />\n          <Route path=\"/checkout\" exact component={Booking} />\n          <Route path=\"/search\" exact component={Search} />\n          <Route path=\"/board\" exact component={Boarding} />\n          <Route path=\"/erd\" exact component={Erd} />\n          <Route path=\"/boardingpass\" exact component={BoardingPass} />\n\n\n        </Switch>\n\n      </Router>\n\n    </div>\n  );\n}\n\nexport default App;\n",["67","68"],"/home/shehzman/dbhw4/db-hw4/src/Booking.js",["69"],"import React from 'react';\nimport axios from 'axios'\nimport './Booking.css';\nimport { Accordion, Card, Alert, Form, Row, Col, Button, InputGroup } from 'react-bootstrap';\nimport { Redirect } from 'react-router-dom'\nimport BookingModal from './BookingModal'\n\n\nclass Booking extends React.Component {\n    constructor(props) {\n        super(props)\n        this.setInput = this.setInput.bind(this)\n        this.setTravS = this.setTravS.bind(this)\n        this.randInput = this.randInput.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n\n        this.state = {\n            returned: false,\n            results:{waitlist:'',tickets:[],bookRef:''}, \n            running:false,\n            promo: '',\n            promoApplied: false,\n            isValid: false,\n            validated: false,\n            discountRate: 0,\n            isErr: false,\n            flightIDB: '',\n            totP: 0,\n            fData: [],\n            render: false,\n            customer: { email: '', phoneNumber: '', name: '' },\n            payment: { cardNo: '', expMon: '', expYr: '', secCode: '', address: '', city: '', state: '', zip: '' },\n            travelers: {},\n\n            reqParams: {\n                adult: '',\n                child: '',\n                infant: '',\n                econ: '',\n                flightIDA: ''\n\n            },\n            params: new URLSearchParams(this.props.location.search)\n        }\n    }\n\n    randInput(e) {\n        let ran = {}\n        const names = ['John', 'Sally', 'Jacob', 'Bob', 'Alex', 'Susie', 'Nathan', 'Andy', 'Natasha', 'Gabe', 'Pam', 'Angela', 'Michael', 'Gus', 'Jesse']\n        const gen = ['m', 'f', 'm', 'm', 'm', 'f', 'm', 'm', 'f', 'm', 'f', 'f', 'm', 'm', 'f']\n        let dobs = {\n            adult: ['1999-12-15', '1999-11-29', '1995-08-15', '1988-05-03', '1996-04-03'],\n            child: ['2010-11-02', '2009-05-04', '2015-01-02', '2014-08-04', '2013-06-03'],\n            infant: ['2020-11-04', '2020-04-20', '2020-03-02', '2020-07-03', '2020-05-04']\n        }\n        const lNames = ['Smith', 'Johnson', 'Williams', 'Brown', 'Jones', 'Garcia', 'Miller', 'Davis', 'Rodriguez', 'Martinez', 'Hernandez', 'Lopez', 'Gonzalez', 'Wilson', 'Anderson']\n        \n        const people = ['adult', 'child', 'infant']\n        let counter = 0\n        ran['travelers'] = {}\n        people.forEach((p, ind) => {\n            let dob = dobs[p]\n            for (let x = 0; x < this.state.reqParams[p]; x++) {\n\n\n                ran['travelers'][p + x] = {\n                    name: names[counter],\n                    lastName: lNames[counter],\n                    dob: dob[x],\n                    gender: gen[counter] === 'm' ? 'male' : 'female'\n                }\n                counter++\n\n            }\n\n        })\n        ran.customer = {\n            email: 'helloworld@gmail.com',\n            name: 'World Hello',\n            phoneNumber: '123456789'\n        }\n        ran.payment = {\n            cardNo: '1234567890111213',\n            expYr: '2023',\n            expMon: '5',\n            secCode: '123',\n            address: '54321 Meadows Point',\n            city: 'Houston',\n            state: 'TX',\n            zip: '87654'\n        }\n        this.setState({ customer: ran.customer, payment: ran.payment, travelers: ran.travelers })\n        console.log(ran.travelers)\n\n    }\n    setInput(e) {\n        const x = e.target.name.split('_')\n        this.setState(prevState => ({\n            [x[0]]: {\n                ...prevState[x[0]],\n                [x[1]]: e.target.value\n            }\n        }))\n    }\n    createShell(p) {\n        const arr = ['adult', 'child', 'infant']\n        let tr = {}\n        p.forEach((t, ind) => {\n            for (let x = 0; x < t; x++)\n                tr[arr[ind] + x] = {\n                    name: '',\n                    lastName: '',\n                    gender: '',\n                    dob: ''\n                }\n        })\n        return tr\n\n    }\n    setTravS(e) {\n        const x = e.target.name.split('_')\n        this.setState(prevState => ({\n            travelers: {\n                ...prevState.travelers,\n                [x[0]]: {\n                    ...prevState.travelers[x[0]],\n                    [x[1]]: e.target.value\n                }\n            }\n        }), () => console.log(this.state, 'state'))\n    }\n\n    formatData(data) {\n        let flights = []\n\n        data.forEach((d, ind) => {\n            let sto = []\n\n\n            let x = data[ind][0]\n            data[ind].forEach((da) => {\n\n                if (da.airc)\n                    sto.push({ airp: da.airc, dur: this.getHours(da.duration * 60000) })\n            })\n\n            if (data[ind].length > 0)\n                flights.push({\n                    dept_air: x.aira,\n                    arr_air: x.airb,\n                    stops: sto,\n                    pf: x.dc + ', ' + x.ds,\n                    pt: x.ac + ', ' + x.as,\n                    price: (parseInt(x.price) + (this.state.reqParams.econ === 'business' ? 200 : 0)),\n                    taxes: (parseInt(x.price) + (this.state.reqParams.econ === 'business' ? 200 : 0)) * 0.0825,\n                    dept_time: this.getTime(new Date(x.scheduled_departure)),\n                    dept_date: this.getDate(new Date(x.scheduled_departure)),\n                    arr_date: this.getDate(new Date(x.scheduled_arrival)),\n                    arr_time: this.getTime(new Date(x.scheduled_arrival)),\n                    interval: this.getHours(new Date(x.scheduled_arrival), new Date(x.scheduled_departure))\n\n\n                })\n\n\n\n        })\n\n        this.setState({ fData: flights, render: true })\n    }\n    getDate(t) {\n        return t.toLocaleString('en-US', { weekday: 'long', month: 'short', day: 'numeric', year: 'numeric' })\n    }\n    getTime(time) {\n        return time.toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true })\n    }\n    getFlightInfo() {\n        return this.state.fData.map(f => (\n\n            <>\n                <b key={f.dept_air}>{f.pf} ({f.dept_air}) to {f.pt} ({f.arr_air})</b>\n                <br />{f.dept_date}<br /> {f.dept_time + ' - ' + f.arr_time} ({f.interval})<br />\n                {f.stops.map(s => (\n                    <>{s.dur} stop at {s.airp}<br /></>\n                ))}\n\n            </>\n        ))\n    }\n    componentDidMount() {\n        this.getDB()\n    }\n    async getDB() {\n\n\n        try {\n            const qp = this.validateParams()\n            if (!qp)\n                throw new Error(\"wrong qp\")\n            const res = await axios('http://localhost:7000/checkout?' + qp)\n            console.log(res.data,'check')\n            const x = res.data[0].length\n            const y = res.data[1].length\n            if (x > 0 && (this.state.flightIDB === '' || y > 0))\n                this.formatData(res.data)\n            else\n                throw new Error(\"no flight match\")\n\n        }\n        catch (e) {\n            console.log(e)\n            this.setErr()\n        }\n    }\n\n    inRange(x, min = 0) {\n        return x >= min && x <= 5\n    }\n    getHours(dateB, dateA = 0) {\n        const x = (dateB - dateA) / (60000)\n        const z = Math.floor(x / 60)\n        const y = x % 60\n        return (z > 0 ? z + `h ` : '') + (y > 0 ? `${y}m` : '')\n    }\n    validateParams() {\n\n        const nums = ['adult', 'child', 'infant']\n        const rp = this.state.reqParams\n\n        let st = {}\n        let tot = 0\n        let param = ''\n        for (let f in rp) {\n\n            var x = this.state.params.get(f)\n\n            if (!x)\n                return false\n            if (nums.find(n => (n === f))) {\n\n                if (isNaN(x))\n                    return false\n                x = parseInt(x)\n                tot += x\n\n            }\n            else\n                param += (`${f + '=' + x}&`)\n            st[f] = x\n        }\n\n        var y = this.state.params.get('flightIDB')\n        if (!this.inRange(st.child) || !this.inRange(st.adult, 1) || !this.inRange(st.infant))\n            return false\n        param += (`${y ? `flightIDB=${y}&` : ''}seats=${tot}`)\n        this.setState(prevState => (\n            {\n                flightIDB: (y ? y : prevState.flightIDB),\n                totP: tot,\n                travelers: this.createShell([st.adult, st.child, st.infant]),\n                reqParams: {\n                    ...prevState.reqParams,\n                    ...st\n                }\n            }), () => { console.log(this.state) })\n\n\n        return encodeURI(param)\n\n    }\n    setErr() {\n\n        this.setState({ isErr: true })\n\n    }\n    async getPromos(c) {\n        try {\n            this.setState({ promoApplied: true })\n            const res = await axios(`http://localhost:7000/promos?code=${encodeURIComponent(c)}`)\n            console.log(res.data)\n            if (res.data[0])\n                this.setState({\n                    discountRate: ((parseInt(res.data[0].discount)))\n\n                }, () => console.log(this.state.discountRate, 'dr'))\n            else\n                throw (new Error('No Promo Match'))\n\n\n        }\n        catch (e) {\n            this.setState({ promoApplied: false })\n        }\n\n    }\n\n    getCountString() {\n        const a = ['adult', 'child', 'infant']\n        const plurals = ['Adults', 'Children', 'Infants']\n        let s = this.state.totP + ' ' + (this.state.totP > 1 ? 'Travelers' : 'Traveler')\n        s += ': '\n        a.forEach((st, ind) => {\n\n            let t = this.state.reqParams[st]\n\n            s += ((t > 0 ? t + ' ' + (t === 1 ? st.charAt(0).toUpperCase() + st.slice(1) : plurals[ind]) + ', ' : ''))\n        })\n        s = s.slice(0, -2)\n        return s\n    }\n\n    getPrices() {\n        let p = []\n \n        const a = ['adult', 'child', 'infant']\n        const rate = [1, 1, 0]\n        let disc = this.state.flightIDB !== '' ? 75 : 0\n        let total = 0\n        let tax = 0\n        this.state.fData.forEach(f => {\n            let count = 0\n            p.push(<b>Flight from {f.dept_air} to {f.arr_air} <br /></b>)\n            rate.forEach(((pe, ind) => {\n                let ar = this.state.reqParams[a[ind]]\n                for (let i = 0; i < ar; i++) {\n                    let ip = ((f.price * pe - (a[ind] === 'infant' ? 0 : disc)) * (1 - (this.state.discountRate * .01)))\n                    total += (ip + (ip * .0825))\n                    tax += (ip * .0825)\n                    p.push(<>\n                        Traveler {++count}: ${ip.toFixed(2)}<br />\n                    </>\n                    )\n                }\n            }))\n        })\n\n        return (\n            <>\n                {p}\n                <b>Taxes:</b><br /> ${tax.toFixed(2)}<br />\n                <b>Total:</b><br /> ${total.toFixed(2)}</>\n        )\n    }\n    handleSubmit(event) {\n\n        const form = event.currentTarget;\n\n        if (form.checkValidity() === false) {\n\n            event.stopPropagation();\n        }\n        else {\n            this.setState({ isValid: true })\n            this.sendData()\n        }\n\n        event.preventDefault();\n        this.setState({ validated: true })\n\n    }\n    travelingCard() {\n        const t = ['adult', 'child', 'infant']\n        var elem = []\n\n        var tot = this.state.totP\n        var count = 0\n\n\n\n        t.forEach(e => {\n\n            for (var x = 0; x < this.state.reqParams[e]; x++) {\n                let id = e + x\n\n                elem.push(\n                    <Card.Body className={count === 0 ? 'padding2' : 'padding1'}>\n                        <Card.Title>\n                            <h6><b>Traveler {count + 1}: {e.charAt(0).toUpperCase() + e.slice(1)} </b></h6>\n                        </Card.Title>\n\n                        {count === 0 && <p style={{ fontSize: '15px' }}>Traveler names must match government-issued photo ID exactly.</p>}\n\n                        <Form.Row className=\"fo\">\n\n                            <Col md>\n                                <Form.Label>First Name</Form.Label>\n                                <Form.Control value={this.state.travelers[id].name} onChange={this.setTravS} name={id + '_name'} required type=\"text\" minLength=\"2\" maxLength=\"20\" />\n                            </Col>\n\n\n\n                            <Col md>\n                                <Form.Label>Last Name</Form.Label>\n                                <Form.Control value={this.state.travelers[id].lastName} onChange={this.setTravS} name={id + '_lastName'} required type=\"text\" minLength=\"2\" maxLength=\"20\" />\n                            </Col>\n\n                        </Form.Row>\n\n                        <Form.Label>Gender</Form.Label>\n                        <Form.Group>\n                            <Form.Check required inline onChange={this.setTravS} name={id + '_gender'} type=\"radio\" value='male' label='Male' checked={this.state.travelers[id].gender === 'male'} />\n                            <Form.Check inline onChange={this.setTravS} name={id + '_gender'} type=\"radio\" value='female' label='Female' checked={this.state.travelers[id].gender === 'female'} />\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>Date of birth</Form.Label>\n                            <Form.Row>\n\n                                <Col sm={5}>\n                                    <Form.Control value={this.state.travelers[id].dob} type=\"date\" onChange={this.setTravS} name={id + '_dob'} required />\n                                </Col>\n                            </Form.Row>\n                        </Form.Group>\n\n\n\n\n\n\n\n                        {count === tot - 1 &&\n                            <div>\n                                <hr></hr>\n                                <p><b>Seat selection</b></p>\n                                <p style={{ fontSize: '15px' }}>Your specific seat will be assigned by the airline before your flight.</p>\n                            </div>}\n                        {count++ !== tot - 1 && <hr></hr>}\n                    </Card.Body>\n                )\n            }\n        })\n\n        return (elem)\n    }\n    async sendData(){\n        let test={\n            ...this.state.reqParams,\n            ...this.state.discountRate,\n            ...this.state.promo,\n            ...this.state.flightIDB,\n            travelers:this.state.travelers,\n            payment:this.state.payment,\n            customer:this.state.customer\n\n\n        }\n        this.setState({running:true})\n        let resu\n        try{\n             resu=await axios.post('http://localhost:7000/checkout',{\n                ...this.state.reqParams,\n                discountRate:this.state.discountRate,\n                promo:this.state.promo,\n                flightIDB:this.state.flightIDB,\n                travelers:this.state.travelers,\n                payment:this.state.payment,\n                customer:this.state.customer\n                \n\n\n            })\n            this.setState({returned:true,results:resu.data,running:false})\n            console.log(resu)\n        }\n        catch(e){\n            this.setErr()\n        }\n        \n            \n        \n    }\n    render() {\n        return (\n            <>{this.state.isErr && <Redirect to={{ pathName: '/home' }} />}\n\n                {this.state.render &&\n                    <div>\n\n\n\n\n                        <div className='container'>\n                            <h4>Secure booking - only takes a few minutes!</h4>\n\n                            <Alert variant='primary'>\n                                <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-clock\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                                    <path fillRule=\"evenodd\" d=\"M8 15A7 7 0 1 0 8 1a7 7 0 0 0 0 14zm8-7A8 8 0 1 1 0 8a8 8 0 0 1 16 0z\" />\n                                    <path fillRule=\"evenodd\" d=\"M7.5 3a.5.5 0 0 1 .5.5v5.21l3.248 1.856a.5.5 0 0 1-.496.868l-3.5-2A.5.5 0 0 1 7 9V3.5a.5.5 0 0 1 .5-.5z\" />\n                                </svg>\n                        Prices not guaranteed until booked\n                        <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-check2\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                                    <path fillRule=\"evenodd\" d=\"M13.854 3.646a.5.5 0 0 1 0 .708l-7 7a.5.5 0 0 1-.708 0l-3.5-3.5a.5.5 0 1 1 .708-.708L6.5 10.293l6.646-6.647a.5.5 0 0 1 .708 0z\" />\n                                </svg>\n                        Free cancellation!\n                    </Alert>\n                            <div className='ranBut'>\n                                <Button onClick={this.randInput} variant=\"primary\">Fill With Random Values</Button></div>\n                            <Accordion>\n                                <Card>\n                                    <Accordion.Toggle as={Card.Header} eventKey=\"0\">\n                                        Promotions\n                                <svg style={{ marginLeft: '5px' }} width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-caret-down\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                                            <path fillRule=\"evenodd\" d=\"M3.204 5L8 10.481 12.796 5H3.204zm-.753.659l4.796 5.48a1 1 0 0 0 1.506 0l4.796-5.48c.566-.647.106-1.659-.753-1.659H3.204a1 1 0 0 0-.753 1.659z\" />\n                                        </svg>\n                                    </Accordion.Toggle>\n                                    <Accordion.Collapse eventKey=\"0\">\n                                        <Card.Body>\n                                            <Row>\n                                                <Col>\n                                                    <Form.Group>\n                                                        <InputGroup style={{ marginTop: '10px' }}>\n                                                            <Form.Control className='col-lg-4' disabled={this.state.promoApplied} onChange={(e) => { this.setState({ promo: e.target.value }) }} value={this.state.promo} size=\"lg\" type=\"text\" placeholder=\"Promo Code\" />\n                                                            <InputGroup.Append>\n                                                                <Button disabled={this.state.promoApplied} onClick={(e) => { this.getPromos(this.state.promo) }} variant=\"dark\">Apply</Button>{' '}\n                                                            </InputGroup.Append>\n                                                        </InputGroup>\n                                                    </Form.Group>\n                                                </Col>\n                                                <Col>\n                                                    <p><b>Price summary</b><br />\n                                                        {this.getPrices()}</p>\n                                                </Col>\n                                            </Row>\n                                        </Card.Body>\n                                    </Accordion.Collapse>\n                                </Card>\n                            </Accordion>\n                            <Form noValidate validated={this.state.validated} onSubmit={this.handleSubmit}>\n\n                                <Card className='card'>\n                                    <Card.Header>\n                                        <span>\n                                            <svg style={{ marginBottom: '8px', marginRight: '5px' }} width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-person-circle\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                                                <path d=\"M13.468 12.37C12.758 11.226 11.195 10 8 10s-4.757 1.225-5.468 2.37A6.987 6.987 0 0 0 8 15a6.987 6.987 0 0 0 5.468-2.63z\" />\n                                                <path fillRule=\"evenodd\" d=\"M8 9a3 3 0 1 0 0-6 3 3 0 0 0 0 6z\" />\n                                                <path fillRule=\"evenodd\" d=\"M8 1a7 7 0 1 0 0 14A7 7 0 0 0 8 1zM0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8z\" />\n                                            </svg>\n                                            <h4 style={{ display: \"inline\" }}>Who's traveling?</h4>\n                                        </span>\n                                    </Card.Header>\n\n                                    {this.travelingCard()}\n                                </Card>\n\n                                <Card>\n                                    <Card.Header>\n                                        <span>\n                                            <svg style={{ marginBottom: '8px', marginRight: '5px' }} width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-telephone-plus\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                                                <path fillRule=\"evenodd\" d=\"M3.654 1.328a.678.678 0 0 0-1.015-.063L1.605 2.3c-.483.484-.661 1.169-.45 1.77a17.568 17.568 0 0 0 4.168 6.608 17.569 17.569 0 0 0 6.608 4.168c.601.211 1.286.033 1.77-.45l1.034-1.034a.678.678 0 0 0-.063-1.015l-2.307-1.794a.678.678 0 0 0-.58-.122l-2.19.547a1.745 1.745 0 0 1-1.657-.459L5.482 8.062a1.745 1.745 0 0 1-.46-1.657l.548-2.19a.678.678 0 0 0-.122-.58L3.654 1.328zM1.884.511a1.745 1.745 0 0 1 2.612.163L6.29 2.98c.329.423.445.974.315 1.494l-.547 2.19a.678.678 0 0 0 .178.643l2.457 2.457a.678.678 0 0 0 .644.178l2.189-.547a1.745 1.745 0 0 1 1.494.315l2.306 1.794c.829.645.905 1.87.163 2.611l-1.034 1.034c-.74.74-1.846 1.065-2.877.702a18.634 18.634 0 0 1-7.01-4.42 18.634 18.634 0 0 1-4.42-7.009c-.362-1.03-.037-2.137.703-2.877L1.885.511zM12.5 1a.5.5 0 0 1 .5.5V3h1.5a.5.5 0 0 1 0 1H13v1.5a.5.5 0 0 1-1 0V4h-1.5a.5.5 0 0 1 0-1H12V1.5a.5.5 0 0 1 .5-.5z\" />\n                                            </svg>\n                                            <h4 style={{ display: \"inline\" }}>Contact info</h4>\n                                        </span>\n                                    </Card.Header>\n\n                                    <Card.Body>\n\n                                        <Form.Row>\n                                            <Form.Group className='col-lg-5' controlId=\"exampleForm.ControlInput1\">\n                                                <Form.Label>Email address</Form.Label>\n                                                <Form.Control value={this.state.customer.email} name='customer_email' maxLength='25' onChange={this.setInput} required type=\"email\" placeholder=\"name@example.com\" />\n                                            </Form.Group>\n                                        </Form.Row>\n                                        <Form.Row>\n\n\n                                            <Form.Group className='col-lg-5' controlId=\"formGridAddress1\">\n                                                <Form.Label>Phone number</Form.Label>\n                                                <Form.Control value={this.state.customer.phoneNumber} name=\"customer_phoneNumber\" onChange={this.setInput} pattern=\"\\d+\" minLength='10' maxLength='10' required className='col-lg-12' placeholder=\"1234567890\" />\n                                            </Form.Group>\n                                        </Form.Row>\n\n                                        <Form.Group id=\"formGridCheckbox\">\n                                            <Form.Check className='label' type=\"checkbox\" label=\"Receive text alerts about this trip. Message and data rates may apply\" />\n                                        </Form.Group>\n                                    </Card.Body>\n                                </Card>\n\n                                <Card className='card'>\n                                    <Card.Header>\n                                        <span>\n                                            <svg style={{ marginBottom: '8px', marginRight: '5px' }} width=\"1em\" height=\"2em\" viewBox=\"0 0 16 16\" className=\"bi bi-credit-card-2-back\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                                                <path fillRule=\"evenodd\" d=\"M14 3H2a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V4a1 1 0 0 0-1-1zM2 2a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2H2z\" />\n                                                <path d=\"M11 5.5a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1-.5-.5v-1zM1 9h14v2H1V9z\" />\n                                            </svg>\n                                            <h4 style={{ display: \"inline\" }}>How would you like to pay?</h4>\n                                        </span>\n                                    </Card.Header>\n                                    <Card.Body>\n                                        <Card.Title>\n                                            <h6>Primary Contact Name</h6>\n                                        </Card.Title>\n\n                                        <Form.Row>\n                                            <Form.Group className='col-lg-5' as={Col}>\n\n                                                <Form.Control\n                                                    required\n                                                    type=\"text\"\n                                                    minLength='2' maxLength='20'\n                                                    name='customer_name'\n                                                    value={this.state.customer.name}\n                                                    onChange={this.setInput}\n\n                                                />\n                                            </Form.Group>\n                                        </Form.Row>\n\n                                        <Form.Row>\n                                            <Form.Group className='col-lg-4' as={Col}>\n                                                <Form.Label>Debit/Credit card number</Form.Label>\n                                                <Form.Control\n                                                    required\n                                                    pattern=\"\\d+\"\n                                                    type=\"text\"\n                                                    name='payment_cardNo'\n                                                    value={this.state.payment.cardNo}\n                                                    onChange={this.setInput}\n                                                    minLength=\"15\" maxLength=\"19\"\n                                                />\n                                            </Form.Group>\n                                        </Form.Row>\n\n                                        <Form.Label>Expiration date</Form.Label>\n                                        <Form.Row>\n                                            <Form.Group controlId=\"exampleForm.ControlSelect1\">\n                                                <Form.Control value={this.state.payment.expMon} name=\"payment_expMon\" onChange={this.setInput} custom required as=\"select\">\n                                                    <option value=''>Month</option>\n                                                    <option value='1'>01-Jan</option>\n                                                    <option value='2'>02-Feb</option>\n                                                    <option value='3'>03-Mar</option>\n                                                    <option value='4'>04-Apr</option>\n                                                    <option value='5'>05-May</option>\n                                                    <option value='6'>06-Jun</option>\n                                                    <option value='7'>07-Jul</option>\n                                                    <option value='8'>08-Aug</option>\n                                                    <option value='9'>09-Sep</option>\n                                                    <option value='10'>10-Oct</option>\n                                                    <option value='11'>11-Nov</option>\n                                                    <option value='12'>12-Dec</option>\n                                                </Form.Control>\n                                            </Form.Group>\n\n                                            <Form.Group style={{ marginLeft: '8px' }}>\n                                                <Form.Control custom value={this.state.payment.expYr} name=\"payment_expYr\" onChange={this.setInput} required as=\"select\">\n                                                    <option value=''>Year</option>\n                                                    <option value='2020'>2020</option>\n                                                    <option value='2021'>2021</option>\n                                                    <option value='2022'>2022</option>\n                                                    <option value='2023'>2023</option>\n                                                    <option value='2024'>2024</option>\n                                                    <option value='2025'>2025</option>\n                                                    <option value='2026'>2026</option>\n                                                    <option value='2027'>2027</option>\n                                                    <option value='2028'>2028</option>\n                                                    <option value='2029'>2029</option>\n                                                    <option value='2030'>2030</option>\n                                                    <option value='2031'>2031</option>\n                                                    <option value='2032'>2032</option>\n                                                    <option value='2033'>2033</option>\n                                                    <option value='2034'>2034</option>\n                                                    <option value='2035'>2035</option>\n                                                    <option value='2036'>2036</option>\n                                                    <option value='2037'>2037</option>\n                                                    <option value='2038'>2038</option>\n                                                    <option value='2039'>2039</option>\n                                                </Form.Control>\n                                            </Form.Group>\n                                        </Form.Row>\n\n                                        <Form.Row>\n                                            <Form.Group as={Col}>\n                                                <Form.Label>Security code</Form.Label>\n                                                <Form.Control value={this.state.payment.secCode} name=\"payment_secCode\" onChange={this.setInput} className='col-md-1'\n                                                    required\n                                                    type=\"text\"\n                                                    pattern=\"\\d+\"\n                                                    minLength=\"3\" maxLength=\"3\"\n                                                />\n                                            </Form.Group>\n                                        </Form.Row>\n\n                                        <hr></hr>\n\n\n\n\n                                        <Form.Group controlId=\"formGridAddress3\">\n                                            <Form.Label>Billing address</Form.Label>\n                                            <Form.Control value={this.state.payment.address} name=\"payment_address\" onChange={this.setInput} required className='col-lg-6' placeholder=\"123 Main St\" />\n                                        </Form.Group>\n\n\n\n                                        <Form.Row>\n                                            <Form.Group className='col-lg-3' as={Col} controlId=\"formGridCity\">\n                                                <Form.Label>City</Form.Label>\n                                                <Form.Control name=\"payment_city\" value={this.state.payment.city} onChange={this.setInput} minLength='2' maxLength='20' required />\n                                            </Form.Group>\n\n                                            <Form.Group className='col-sm-2' as={Col} controlId=\"formGridState\">\n                                                <Form.Label>State</Form.Label>\n                                                <Form.Control name=\"payment_state\" onChange={this.setInput} as=\"select\" value={this.state.payment.state} custom>\n                                                    <option value=\"\">Select</option>\n                                                    <option value=\"AL\">AL</option><option value=\"AK\">AK</option><option value=\"AZ\">AZ</option><option value=\"AR\">AR</option><option value=\"CA\">CA</option><option value=\"CO\">CO</option><option value=\"CT\">CT</option><option value=\"DE\">DE</option><option value=\"DC\">DC</option><option value=\"FL\">FL</option><option value=\"GA\">GA</option><option value=\"HI\">HI</option><option value=\"ID\">ID</option><option value=\"IL\">IL</option><option value=\"IN\">IN</option><option value=\"IA\">IA</option><option value=\"KS\">KS</option><option value=\"KY\">KY</option><option value=\"LA\">LA</option><option value=\"ME\">ME</option><option value=\"MD\">MD</option><option value=\"MA\">MA</option><option value=\"MI\">MI</option><option value=\"MN\">MN</option><option value=\"MS\">MS</option><option value=\"MO\">MO</option><option value=\"MT\">MT</option><option value=\"NE\">NE</option><option value=\"NV\">NV</option><option value=\"NH\">NH</option><option value=\"NJ\">NJ</option><option value=\"NM\">NM</option><option value=\"NY\">NY</option><option value=\"NC\">NC</option><option value=\"ND\">ND</option><option value=\"OH\">OH</option><option value=\"OK\">OK</option><option value=\"OR\">OR</option><option value=\"PA\">PA</option><option value=\"RI\">RI</option><option value=\"SC\">SC</option><option value=\"SD\">SD</option><option value=\"TN\">TN</option><option value=\"TX\">TX</option><option value=\"UT\">UT</option><option value=\"VT\">VT</option><option value=\"VA\">VA</option><option value=\"WA\">WA</option><option value=\"WV\">WV</option><option value=\"WI\">WI</option><option value=\"WY\">WY</option><option value=\"AS\">AS</option><option value=\"FM\">FM</option><option value=\"GU\">GU</option><option value=\"MH\">MH</option><option value=\"MP\">MP</option><option value=\"PW\">PW</option><option value=\"PR\">PR</option><option value=\"VI\">VI</option><option value=\"AA\">AA</option><option value=\"AE\">AE</option><option value=\"AP\">AP</option>\n                                                </Form.Control>\n                                            </Form.Group>\n\n                                            <Form.Group className='col-sm-2' as={Col} controlId=\"formGridZip\">\n                                                <Form.Label>Zip</Form.Label>\n                                                <Form.Control value={this.state.payment.zip} name=\"payment_zip\" onChange={this.setInput} minLength='5' maxLength='5' required pattern=\"\\d+\" />\n                                            </Form.Group>\n                                        </Form.Row>\n\n\n\n                                    </Card.Body>\n                                </Card>\n\n                                <Row>\n                                    <Col>\n                                        <Card>\n                                            <Card.Header>\n                                                <span>\n                                                    <svg style={{ marginBottom: '8px', marginRight: '5px' }} width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-cursor\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                                                        <path fillRule=\"evenodd\" d=\"M14.082 2.182a.5.5 0 0 1 .103.557L8.528 15.467a.5.5 0 0 1-.917-.007L5.57 10.694.803 8.652a.5.5 0 0 1-.006-.916l12.728-5.657a.5.5 0 0 1 .556.103zM2.25 8.184l3.897 1.67a.5.5 0 0 1 .262.263l1.67 3.897L12.743 3.52 2.25 8.184z\" />\n                                                    </svg>\n                                                    <h4 style={{ display: \"inline\" }}>Flight info</h4>\n                                                </span>\n                                            </Card.Header>\n                                            <Card.Body>\n                                                <Card.Title>{this.state.flightIDB === '' ? 'One way flight' : 'Round-Trip Flight'}</Card.Title>\n                                                <Card.Subtitle className=\"mb-2 text-muted\">{this.getCountString()}  </Card.Subtitle>\n                                                <hr />\n                                                <p>{this.getFlightInfo()}</p>\n\n                                                <hr />\n                                                <b>Your price summary</b>\n                                                <p>{this.getPrices()}</p>\n                                            </Card.Body>\n                                        </Card>\n                                    </Col>\n                                    <Col>\n                                        <Card style={{ marginBottom: '10px' }} className='card'>\n                                            <Card.Header>\n                                                <span>\n                                                    <svg style={{ marginBottom: '8px', marginRight: '5px' }} width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-clipboard-check\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                                                        <path fillRule=\"evenodd\" d=\"M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1h1a1 1 0 0 1 1 1V14a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V3.5a1 1 0 0 1 1-1h1v-1z\" />\n                                                        <path fillRule=\"evenodd\" d=\"M9.5 1h-3a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h3a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5zm-3-1A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3zm4.354 7.146a.5.5 0 0 1 0 .708l-3 3a.5.5 0 0 1-.708 0l-1.5-1.5a.5.5 0 1 1 .708-.708L7.5 9.793l2.646-2.647a.5.5 0 0 1 .708 0z\" />\n                                                    </svg>\n                                                    <h4 style={{ display: \"inline\" }}>Review and book your trip</h4>\n                                                </span>\n                                            </Card.Header>\n                                            <Card.Body>\n                                                <Card.Title>\n                                                    <h6>Please Read!</h6>\n                                                </Card.Title>\n\n                                                <ol>\n                                                    <li key={'li1'}>Review your trip details to make sure the dates and times are correct.</li>\n                                                    <li key={'li2'}>Check your spelling. Flight passenger names must match government-issued photo ID exactly.</li>\n                                                    <li key={'li3'}>\n                                                        Review the terms of your booking:\n                                        <ul>\n                                                            <li key={'li4'}>Airline assigns seats</li>\n                                                            <li key={'li5'}>Bring a carry-on bag</li>\n                                                            <li key={'li6'}>Pay to bring a checked bag</li>\n                                                            <li key={'li7'}>To reschedule your flight, cancel your current one and book a new one again</li>\n                                                        </ul>\n                                                    </li>\n                                                </ol>\n                                                <p>By selecting to complete this booking, I acknowledge that I have read and accept the above Rules & Restrictions.</p>\n                                                <BookingModal return={this.state.returned} result={this.state.results} run={this.state.running}/>\n                                                <div className='message'>\n                                                    <svg style={{ marginBottom: '5px', marginRight: '5px' }} width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-lock\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                                                        <path fillRule=\"evenodd\" d=\"M11.5 8h-7a1 1 0 0 0-1 1v5a1 1 0 0 0 1 1h7a1 1 0 0 0 1-1V9a1 1 0 0 0-1-1zm-7-1a2 2 0 0 0-2 2v5a2 2 0 0 0 2 2h7a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2h-7zm0-3a3.5 3.5 0 1 1 7 0v3h-1V4a2.5 2.5 0 0 0-5 0v3h-1V4z\" />\n                                                    </svg>\n                                                    <p style={{ fontSize: '14px', display: \"inline\" }}>We use secure transmission and encrypted storage to protect your personal information.</p>\n                                                </div>\n\n                                            </Card.Body>\n                                        </Card>\n                                    </Col>\n                                </Row>\n\n                            </Form>\n                        </div>\n\n                    </div>}\n            </>\n        )\n    }\n}\n\nexport default Booking","/home/shehzman/dbhw4/db-hw4/src/ResTable.js",[],"/home/shehzman/dbhw4/db-hw4/src/Search.js",[],["70","71"],"/home/shehzman/dbhw4/db-hw4/src/Homepage.js",[],["72","73"],"/home/shehzman/dbhw4/db-hw4/src/BookingModal.js",["74","75"],"/home/shehzman/dbhw4/db-hw4/src/BoardingModal.js",["76"],"/home/shehzman/dbhw4/db-hw4/src/Navigation.js",[],"/home/shehzman/dbhw4/db-hw4/src/reportWebVitals.js",[],["77","78"],"/home/shehzman/dbhw4/db-hw4/src/Example.js",[],"/home/shehzman/dbhw4/db-hw4/src/Erd.js",["79"],"import React from 'react';\nimport { Image, Card } from 'react-bootstrap'\nimport erd from './ERD.jpeg';\n\nclass Erd extends React.Component {\n    render() {\n        return (\n            <div >\n                <h1 style={{ paddingTop: '10px' }}>ER Diagram</h1>\n                <Image style={{ paddingTop: '20px' }} className='mx-auto d-block' src={erd} rounded width='90%' />\n            </div>\n        );\n    }\n}\n\nexport default Erd","/home/shehzman/dbhw4/db-hw4/src/Boarding.js",["80","81"],"/home/shehzman/dbhw4/db-hw4/src/Checkin.js",["82","83"],"import React from 'react';\nimport './Checkin.css';\nimport { Form, Row, Col, Button, Card } from 'react-bootstrap';\nimport './Example'\nimport Example from './Example';\n\nclass Checkin extends React.Component {\n    constructor(){\n        super()\n        this.state={\n            firstName:'',\n            lastName:'',\n            ticketNo:''\n        }\n    }\n    render() {\n        return (\n            <div>\n                <div class='content'>\n                    <h1>Check-in</h1>\n                    <Card style={{ width: '90%' }}>\n                        <Card.Img style={{ height: '20rem' }} variant=\"top\" src=\"https://images.unsplash.com/photo-1522153588464-5dba4c1983c4?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=675&q=80\" />\n                        <Card.Body>\n                            <Card.Text style={{ fontSize: '15px' }}>\n                                Check-in is available starting 24 hours before your scheduled departure.\n      </Card.Text>\n                            <Form noValidate validated>\n                                <Form.Row>\n                                    <Form.Group className='col-md-4' as={Col} controlId=\"formGridEmail\">\n                                        <Form.Label>Ticket number</Form.Label>\n                                        <Form.Control pattern=\"\\d+\" required type=\"text\" />\n                                    </Form.Group>\n\n                                    <Form.Group className='col-md-4' as={Col} controlId=\"formGridPassword\">\n                                        <Form.Label>First name</Form.Label>\n                                        <Form.Control required type=\"text\" />\n                                    </Form.Group>\n\n                                    <Form.Group className='col-md-4' as={Col} controlId=\"formGridPassword\">\n                                        <Form.Label>Last name</Form.Label>\n                                        <Form.Control required type=\"text\" />\n                                    </Form.Group>\n                                </Form.Row>\n                                <Form.Row>\n                                    <Col>\n                                        <Example />\n                                    </Col>\n                                </Form.Row>\n                            </Form>\n                        </Card.Body>\n                    </Card>\n\n                </div>\n            </div >\n        )\n    }\n}\n\nexport default Checkin","/home/shehzman/dbhw4/db-hw4/src/BoardingPass.js",[],{"ruleId":"84","severity":1,"message":"85","line":1,"column":8,"nodeType":"86","messageId":"87","endLine":1,"endColumn":12},{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","replacedBy":"91"},{"ruleId":"84","severity":1,"message":"92","line":435,"column":13,"nodeType":"86","messageId":"87","endLine":435,"endColumn":17},{"ruleId":"88","replacedBy":"93"},{"ruleId":"90","replacedBy":"94"},{"ruleId":"88","replacedBy":"95"},{"ruleId":"90","replacedBy":"96"},{"ruleId":"84","severity":1,"message":"97","line":19,"column":12,"nodeType":"86","messageId":"87","endLine":19,"endColumn":16},{"ruleId":"84","severity":1,"message":"98","line":20,"column":11,"nodeType":"86","messageId":"87","endLine":20,"endColumn":22},{"ruleId":"84","severity":1,"message":"98","line":9,"column":11,"nodeType":"86","messageId":"87","endLine":9,"endColumn":22},{"ruleId":"88","replacedBy":"99"},{"ruleId":"90","replacedBy":"100"},{"ruleId":"84","severity":1,"message":"101","line":2,"column":17,"nodeType":"86","messageId":"87","endLine":2,"endColumn":21},{"ruleId":"84","severity":1,"message":"102","line":3,"column":16,"nodeType":"86","messageId":"87","endLine":3,"endColumn":19},{"ruleId":"84","severity":1,"message":"103","line":3,"column":26,"nodeType":"86","messageId":"87","endLine":3,"endColumn":32},{"ruleId":"84","severity":1,"message":"102","line":3,"column":16,"nodeType":"86","messageId":"87","endLine":3,"endColumn":19},{"ruleId":"84","severity":1,"message":"103","line":3,"column":26,"nodeType":"86","messageId":"87","endLine":3,"endColumn":32},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","no-native-reassign",["104"],"no-negated-in-lhs",["105"],"'test' is assigned a value but never used.",["104"],["105"],["104"],["105"],"'show' is assigned a value but never used.","'handleClose' is assigned a value but never used.",["104"],["105"],"'Card' is defined but never used.","'Row' is defined but never used.","'Button' is defined but never used.","no-global-assign","no-unsafe-negation"]